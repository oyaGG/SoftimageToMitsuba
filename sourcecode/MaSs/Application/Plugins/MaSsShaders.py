# MaSsShaders
# Initial code generated by Softimage SDK Wizard
# Executed Sat Mar 15 22:41:18 UTC+0600 2014 by Philipp
# 
# Tip: To add a command to this plug-in, right-click in the 
# script editor and choose Tools > Add Command.
import win32com.client
from win32com.client import constants as c

null = None
false = 0
true = 1

#iorPresets = ["Acetone","1.36",
#	"Acrylic Glass","1.49",
#	"Air","1.00028",
#	"Amber","1.55",
#	"Benzene","1.501",
#	"Bk7","1.5046",
#	"Bromine","1.661",
#	"Carbon Dioxide","1.00045",
#	"Carbon Tetrachloride","1.461",
#	"Diamond","2.419",
#	"Fused Quartz","1.458",
#	"Gycerol","1.4729",
#	"Helium","1.00004",
#	"Hydrogen","1.00013",
#	"Pet","1.575",
#	"Pyrex","1.470",
#	"Polypropylene","1.49",
#	"Silicone Oil","1.52045",
#	"Sodium Chloride","1.544",
#	"Vacuum","1.0",
#	"Water","1.3330",
#	"Water Ice","1.31"]

sPresets = [
	"Apple Juice", "Apple Juice",
	"Apple","Apple",
	"Budweiser Beer", "Budweiser Beer",
	"Cappuccino Powder", "Cappuccino Powder",
	"Chardonnay", "Chardonnay",
	"Chicken 1","Chicken1",
	"Chicken 2","Chicken2",
	"Clorox", "Clorox",
	"Coke", "Coke",
	"Coors Light Beer", "Coors Light Beer",
	"Cranberry Juice", "Cranberry Juice",
	"Cream","Cream",
	"Espresso", "Espresso",
	"Gatorade", "Gatorade",
	"Grape Juice", "Grape Juice",
	"Head & Shoulders Shampoo", "Head & Shoulders Shampoo",
	"Ketchup","Ketchup",
	"Lemon Tea Powder", "Lemon Tea Powder",
	"Lowfat Chocolate Milk", "Lowfat Chocolate Milk",
	"Lowfat Mlik", "Lowfat Mlik",
	"Lowfat Soy Milk", "Lowfat Soy Milk",
	"Marble","Marble",
	"Merlot", "Merlot",
	"Mint Mocha Coffee", "Mint Mocha Coffee",
	"Orange Juice Poweder", "Orange Juice Powder",
	"Pepsi", "Pepsi",
	"Pink Lemonade Powder", "Pink Lemonade Powder",
	"Potato","Potato",
	"Reduced Mlik", "Reduced Milk",
	"Regular Milk", "Regular Milk",
	"Regular Soy Milk", "Regular Soy Milk",
	"Ruby Grapefruit Juice", "Ruby Grapefruit Juice",
	"Salt Powder", "Salt Powder",
	"Shampoo", "Shampoo",
	"Skim Milk","Skimmilk",
	"Skin 1","Skin1",
	"Skin 2","Skin2",
	"Spectralon","Spectralon",
	"Sprite", "Sprite",
	"Strawberry Shampoo", "Strawberry Shampoo",
	"Sugar Powder", "Sugar Powder",
	"Suisse Mocha", "Suisse Mocha",
	"White Grapefruit Juice", "White Grapefruit Juice",
	"White Zinfandel", "White Zinfandel"]

distributions = [
	"Beckmann","beckmann",
	"Phong","phong",
	"Walter","ggx",
	"Anisotropic Phong","as"]

wardVariants = [
"Ward", "ward",
"Corrected Ward", "ward-duer",
"Balanced Ward", "balanced"
]

conductorPresets = ["Amorphous carbon", "a-C",
"Silver", "Ag",
"Aluminium", "Al",
"Cubic aluminiom arsenide", "AlAs",
"Cubic aluminiom arsenide (palik)", "AlAs_palik",
"Cubic aluminiom antimonide", "AlSb",
"Cubic aluminiom antimonide (palik)", "AlSb_palik",
"Gold", "Au",
"polycrystalline beryllium", "Be",
"polycrystalline beryllium (palik)", "Be_palik",
"Chromium", "Cr",
"Cubic caesium iodide", "CsI",
"Cubic caesium iodide (palik)", "CsI_palik",
"Copper", "Cu",
"Copper (palik)", "Cu_palik",
"Copper (I) oxide", "Cu2O",
"Copper (I) oxide (palik)", "Cu2O_palik",
"Copper (II) oxide", "CuO",
"Copper (II) oxide (palik)", "CuO_palik",
"Cubic diamond", "d-C",
"Cubic diamond (palik)", "d-C_palik",
"Mercury", "Hg",
"Mercury (palik)", "Hg_palik",
"Mercury telluride", "HgTe",
"Mercury telluride (palik)", "HgTe_palik",
"Iridium", "Ir",
"Iridium (palik)", "Ir_palik",
"Polycrystalline potassium", "K",
"Polycrystalline potassium (palik)", "K_palik",
"Lithium", "Li",
"Lithium (palik)", "Li_palik",
"Magnesium oxide", "MgO",
"Magnesium oxide (palik)", "MgO_palik",
"Molybdenum", "Mo",
"Molybdenum (palik)", "Mo_palik",
"Sodium", "Na_palik",
"Niobium", "Nb",
"Niobium (palik)", "Nb_palik",
"Nickel", "Ni_palik",
"Rhodium", "Rh",
"Rhodium (palik)", "Rh_palik",
"Selenium", "Se",
"Selenium (palik)", "Se_palik",
"Hexagonal silicon carbide", "SiC",
"Hexagonal silicon carbide (palic)", "SiC_palik",
"Tin telluride", "SnTe",
"Tin telluride (palic)", "SnTe_palic",
"Tantalum", "Ta",
"Tantalum (palik)", "Ta_palik",
"Trigonal tellurium", "Te",
"Trigonal tellurium (palik)", "Te_palik",
"Polycryst. thorium (IV) fluoride", "ThF4",
"Polycryst. thorium (IV) fluoride (palik)", "ThF4_palik",
"Polycrystalline titanium carbide", "TiC",
"Polycrystalline titanium carbide (palic)", "TiC_palic",
"Titanium nitride", "TiN",
"Titanium nitride (palik)", "TiN_palik",
"Tetragonal titan. dioxide", "TiO2",
"Tetragonal titan. dioxide (palik)", "TiO2_palik",
"Vanadium carbide", "VC",
"Vanadium carbide (palik)", "VC_palik",
"Vanadium", "V_palik",
"Vanadium nitride", "VN",
"Vanadium nitride (palik)", "VN_palik",
"Tungsten", "W"
]

wrapModes = ["Repeat", "repeat",
"Mirror", "mirror",
"Clamp", "clamp",
"Zero", "zero",
"One", "one"
]

filterTypes = ["Elliptical weighted average", "ewa",
"Simple trilinear filtering", "trilinear",
"No filtering", "nearest"
]

curvatures = ["Mean", "mean",
"Gaussian", "gaussian"
]

def XSILoadPlugin( in_reg ):
	in_reg.Author = "Angel07"
	in_reg.Name = "MaSsShaders"
	in_reg.Major = 1
	in_reg.Minor = 0

	#light shaders
	in_reg.RegisterShader( "mPoint", 1, 0 )
	in_reg.RegisterShader( "mSpot", 1, 0 )
	in_reg.RegisterShader( "mDirectional", 1, 0 )
	in_reg.RegisterShader( "mAreaSphere", 1, 0 )
	in_reg.RegisterShader( "mAreaCube", 1, 0 )
	in_reg.RegisterShader( "mAreaCylinder", 1, 0 )
	in_reg.RegisterShader( "mAreaRectangle", 1, 0 )
	in_reg.RegisterShader( "mAreaDisk", 1, 0 )
	in_reg.RegisterShader( "mConstant", 1, 0 )
	in_reg.RegisterShader( "mEnvironment", 1, 0 )
	in_reg.RegisterShader( "mSunSky", 1, 0 )
	in_reg.RegisterShader( "mSun", 1, 0 )
	in_reg.RegisterShader( "mSky", 1, 0 )

	#surface shaders
	in_reg.RegisterShader( "mDiffuse", 1, 0 )
	in_reg.RegisterShader( "mRoughDiffuse", 1, 0 )
	in_reg.RegisterShader( "mDielectric", 1, 0 )
	in_reg.RegisterShader( "mThinDielectric", 1, 0 )
	in_reg.RegisterShader( "mRoughDielectric", 1, 0 )
	in_reg.RegisterShader( "mConductor", 1, 0 )
	in_reg.RegisterShader( "mRoughConductor", 1, 0 )
	in_reg.RegisterShader( "mPlastic", 1, 0 )
	in_reg.RegisterShader( "mRoughPlastic", 1, 0 )
	in_reg.RegisterShader( "mCoating", 1, 0 )
	in_reg.RegisterShader( "mRoughCoating", 1, 0 )
	in_reg.RegisterShader( "mBumpMap", 1, 0 )
	in_reg.RegisterShader( "mPhong", 1, 0 )
	in_reg.RegisterShader( "mWard", 1, 0 )
	in_reg.RegisterShader( "mMixtureBsdf", 1, 0 )
	in_reg.RegisterShader( "mBlendBsdf", 1, 0 )
	in_reg.RegisterShader( "mMask", 1, 0 )
	in_reg.RegisterShader( "mTwoSided", 1, 0 )
	in_reg.RegisterShader( "mDiffTrans", 1, 0 )
	in_reg.RegisterShader( "mHk", 1, 0 )
	#in_reg.RegisterShader( "mIrawan", 1, 0 )
	in_reg.RegisterShader( "mBitmap", 1, 0 )
	in_reg.RegisterShader( "mCheckboard", 1, 0 )
	in_reg.RegisterShader( "mGridTexture", 1, 0 )
	in_reg.RegisterShader( "mScale", 1, 0 )
	in_reg.RegisterShader( "mVertexColors", 1, 0 )
	in_reg.RegisterShader( "mWireframe", 1, 0 )
	in_reg.RegisterShader( "mCurvature", 1, 0 )
	in_reg.RegisterShader( "mSSSDipole", 1, 0 )
	in_reg.RegisterShader( "mRoughSSSDipole", 1, 0 )
	in_reg.RegisterShader( "mHomogeneous", 1, 0 )
	in_reg.RegisterShader( "mHeterogeneous", 1, 0 )
	in_reg.RegisterShader( "mIsotropic", 1, 0 )
	in_reg.RegisterShader( "mHg", 1, 0 )
	in_reg.RegisterShader( "mRayleigh", 1, 0 )
	in_reg.RegisterShader( "mKkay", 1, 0 )
	in_reg.RegisterShader( "mMicroflake", 1, 0 )
	in_reg.RegisterShader( "mMixturePhase", 1, 0 )
	in_reg.RegisterShader( "mConstVolume", 1, 0 )
	in_reg.RegisterShader( "mGridVolume", 1, 0 )
	in_reg.RegisterShader( "mVolCache", 1, 0 )

	in_reg.RegisterShader( "mEmitter", 1, 0 )	



	
	#RegistrationInsertionPoint - do not remove this line

	return true

def XSIUnloadPlugin( in_reg ):
	strPluginName = in_reg.Name
	Application.LogMessage(str(strPluginName) + str(" has been unloaded."), c.siVerbose)
	return true

def AddOutputParam( shaderDef ) :
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetLongName("out")
	
	params = shaderDef.OutputParamDefs
	paramDef = params.AddParamDef( "out", c.siShaderDataTypeColor3, paramOptions )
	paramDef.MainPort = False	

def MaSsShaders_mPoint_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mPoint" )
	
	return True

def MaSsShaders_mSpot_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mSpot" )
	
	return True

def MaSsShaders_mDirectional_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mDirectional" )
	
	return True

def MaSsShaders_mAreaSphere_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mAreaSphere" )
	
	return True
	
def MaSsShaders_mAreaCube_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mAreaCube" )
	
	return True

def MaSsShaders_mAreaCylinder_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mAreaCylinder" )
	
	return True
	
def MaSsShaders_mAreaRectangle_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mAreaRectangle" )
	
	return True
	
def MaSsShaders_mAreaDisk_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mAreaDisk" )
	
	return True

def MaSsShaders_mSky_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mSky" )
	
	return True

def MaSsShaders_mSun_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mSun" )
	
	return True
	
def MaSsShaders_mSunSky_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mSunSky" )
	
	return True
	
def MaSsShaders_mEnvironment_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mEnvironment" )
	
	return True

def MaSsShaders_mConstant_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Light" )
	in_ctxt.SetAttribute("DisplayName", "mConstant" )
	
	return True

def MaSsShaders_mDiffuse_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mDiffuse" )
	return True

def MaSsShaders_mRoughDiffuse_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mRoughDiffuse" )
	return True

def MaSsShaders_mDielectric_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mDielectric" )
	return True

def MaSsShaders_mThinDielectric_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mThinDielectric" )
	return True

def MaSsShaders_mRoughDielectric_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mRoughDielectric" )
	return True

def MaSsShaders_mConductor_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mConductor" )
	return True

def MaSsShaders_mRoughConductor_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mRoughConductor" )
	return True

def MaSsShaders_mPlastic_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mPlastic" )
	return True

def MaSsShaders_mRoughPlastic_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mRoughPlastic" )
	return True

def MaSsShaders_mCoating_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mCoating" )
	return True

def MaSsShaders_mRoughCoating_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mRoughCoating" )
	return True

def MaSsShaders_mBumpMap_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mBumpMap" )
	return True

def MaSsShaders_mPhong_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mPhong" )
	return True

def MaSsShaders_mWard_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mWard" )
	return True

def MaSsShaders_mMixtureBsdf_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mMixtureBsdf" )
	return True

def MaSsShaders_mBlendBsdf_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mBlendBsdf" )
	return True

def MaSsShaders_mMask_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mMask" )
	return True

def MaSsShaders_mTwoSided_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mTwoSided" )
	return True

def MaSsShaders_mDiffTrans_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mDiffTrans" )
	return True

def MaSsShaders_mHk_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mHk" )
	return True

def MaSsShaders_mIrawan_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/BSDF" )
	in_ctxt.SetAttribute("DisplayName", "mIrawan" )
	return True

def MaSsShaders_mBitmap_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mBitmap" )
	return True

def MaSsShaders_mCheckboard_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mCheckboard" )
	return True

def MaSsShaders_mGridTexture_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mGridTexture" )
	return True

def MaSsShaders_mScale_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mScale" )
	return True

def MaSsShaders_mVertexColors_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mVertexColors" )
	return True

def MaSsShaders_mWireframe_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mWireframe" )
	return True

def MaSsShaders_mCurvature_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Bitmap" )
	in_ctxt.SetAttribute("DisplayName", "mCurvature" )
	return True

def MaSsShaders_mRoughSSSDipole_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/SSS" )
	in_ctxt.SetAttribute("DisplayName", "mRoughSSSDipole" )
	return True

def MaSsShaders_mSSSDipole_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/SSS" )
	in_ctxt.SetAttribute("DisplayName", "mSSSDipole" )
	return True

def MaSsShaders_mHomogeneous_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Medium" )
	in_ctxt.SetAttribute("DisplayName", "mHomogeneous" )
	return True

def MaSsShaders_mHeterogeneous_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Medium" )
	in_ctxt.SetAttribute("DisplayName", "mHeterogeneous" )
	return True

def MaSsShaders_mIsotropic_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Phase" )
	in_ctxt.SetAttribute("DisplayName", "mIsotropic" )
	return True

def MaSsShaders_mHg_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Phase" )
	in_ctxt.SetAttribute("DisplayName", "mHg" )
	return True

def MaSsShaders_mRayleigh_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Phase" )
	in_ctxt.SetAttribute("DisplayName", "mRayleigh" )
	return True

def MaSsShaders_mKkay_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Phase" )
	in_ctxt.SetAttribute("DisplayName", "mKkay" )
	return True

def MaSsShaders_mMicroflake_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Phase" )
	in_ctxt.SetAttribute("DisplayName", "mMicroflake" )
	return True

def MaSsShaders_mMixturePhase_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Phase" )
	in_ctxt.SetAttribute("DisplayName", "mMixturePhase" )
	return True

def MaSsShaders_mConstVolume_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Volume" )
	in_ctxt.SetAttribute("DisplayName", "mConstVolume" )
	return True

def MaSsShaders_mGridVolume_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Volume" )
	in_ctxt.SetAttribute("DisplayName", "mGridVolume" )
	return True

def MaSsShaders_mVolCache_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Volume" )
	in_ctxt.SetAttribute("DisplayName", "mVolCache" )
	return True

def MaSsShaders_mEmitter_1_0_DefineInfo( in_ctxt ) :
	in_ctxt.SetAttribute("Category", "Mitsuba/Emitters" )
	in_ctxt.SetAttribute("DisplayName", "mEmitter" )
	return True




def MaSsShaders_mPoint_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mPoint" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	#ppgLayout.AddString( "Name" )	
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mPoint"
	
	return True

def MaSsShaders_mSpot_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0.75 )
	params.AddParamDef( "beamWidth", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "texture", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mSpot" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	#ppgLayout.AddString( "Name" )	
	ppgLayout.AddItem( "color", "Color" )	
	ppgLayout.AddItem( "intensity", "Intensity" )
	ppgLayout.AddItem( "beamWidth", "Beam Width" )
	ppgLayout.AddItem( "texture", "Texture" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mSpot"
	
	return True

def MaSsShaders_mDirectional_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mDirectional" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	#ppgLayout.AddString( "Name" )	
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mDirectional"
	
	return True

def MaSsShaders_mAreaSphere_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	
	#paramOptions.SetDefaultValue( 7000 )
	#params.AddParamDef( "temperature", c.siShaderDataTypeInteger, paramOptions )
	
	#paramOptions.SetDefaultValue( 0 )
	#params.AddParamDef( "type", c.siShaderDataTypeInteger, paramOptions )
	
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "radius", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mAreaSphere" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	#comboItems = ["Intensity", "0", "Temperature", "1"]
	#ppgLayout.AddEnumControl("type", comboItems, "Type")
	
	#ppgLayout.AddItem( "temperature", "Temperature" )
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	ppgLayout.AddItem( "radius", "Radius" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mAreaSphere"
	
	return True

def MaSsShaders_mAreaCube_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "lengthX", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "lengthY", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "lengthZ", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mAreaCube" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	ppgLayout.AddItem( "lengthX", "Length X" )
	ppgLayout.AddItem( "lengthY", "Length Y" )
	ppgLayout.AddItem( "lengthZ", "Length Z" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mAreaCube"
	
	return True

def MaSsShaders_mAreaCylinder_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
		
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "radius", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "length", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mAreaCylinder" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "color", "color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	ppgLayout.AddItem( "radius", "Radius" )
	ppgLayout.AddItem( "length", "Length" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mAreaCylinder"
	
	return True

def MaSsShaders_mAreaRectangle_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "lengthX", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "lengthY", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mAreaRectangle" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	ppgLayout.AddItem( "lengthX", "Length X" )
	ppgLayout.AddItem( "lengthY", "Length Y" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mAreaRectangle"
	
	return True

def MaSsShaders_mAreaDisk_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "radius", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mAreaDisk" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	ppgLayout.AddItem( "radius", "Radius" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mAreaDisk"
	
	return True

def MaSsShaders_mConstant_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "color", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "intensity", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mConstant" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "color", "Color" )
	ppgLayout.AddItem( "intensity", "Intensity" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mConstant"
	
	return True

def MaSsShaders_mEnvironment_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "image", c.siShaderDataTypeImage, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( -1 )
	params.AddParamDef( "gamma", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( True )
	params.AddParamDef( "isCache", c.siShaderDataTypeBoolean, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mEnvironment" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "image", "Image" )
	ppgLayout.AddItem( "scale", "Scale" )
	ppgLayout.AddItem( "gamma", "Gamma" )
	ppgLayout.AddItem( "isCache", "Is Cache" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mEnvironment"
	
	return True

def MaSsShaders_mSunSky_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 512 )
	params.AddParamDef( "resolution", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "sunScale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "skyScale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "sunRadiusScale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 2010 )
	params.AddParamDef( "year", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 7 )
	params.AddParamDef( "month", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 10 )
	params.AddParamDef( "day", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 35.6894 )
	params.AddParamDef( "latitude", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 139.6917 )
	params.AddParamDef( "longitude", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	params.AddParamDef( "sunDirection", c.siShaderDataTypeVector3, paramOptions )
	paramOptions.SetDefaultValue( 0.15 )
	params.AddParamDef( "albedo", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetDefaultValue( 3 )
	paramOptions.SetHardLimit( 1, 10 )
	params.AddParamDef( "turbidity", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 15 )
	paramOptions.SetHardLimit( 0, 24 )
	params.AddParamDef( "hour", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetHardLimit( 0, 60 )
	params.AddParamDef( "minute", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetHardLimit( 0, 60 )
	params.AddParamDef( "second", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 9 )
	paramOptions.SetHardLimit( 0, 24 )
	params.AddParamDef( "timezone", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 1 )
	paramOptions.SetHardLimit( 1, 2 )
	params.AddParamDef( "stretch", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mSunSky" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "turbidity", "Turbidity" )
	ppgLayout.AddItem( "albedo", "Albedo" )
	ppgLayout.AddItem( "year", "Year" )
	ppgLayout.AddItem( "month", "Month" )
	ppgLayout.AddItem( "day", "Day" )
	ppgLayout.AddItem( "hour", "Hour" )
	ppgLayout.AddItem( "minute", "Minute" )
	ppgLayout.AddItem( "second", "Second" )
	ppgLayout.AddItem( "latitude", "Latitude" )
	ppgLayout.AddItem( "longitude", "Longitude" )
	ppgLayout.AddItem( "timezone", "Timezone" )
	ppgLayout.AddItem( "sunDirection", "Sun Direction" )
	ppgLayout.AddItem( "stretch", "Stretch" )
	ppgLayout.AddItem( "resolution", "Resolution" )
	ppgLayout.AddItem( "sunScale", "Sun Scale" )
	ppgLayout.AddItem( "skyScale", "Sky Scale" )
	ppgLayout.AddItem( "sunRadiusScale", "Sun Radius Scale" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mSunSky"
	
	return True

def MaSsShaders_mSun_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	paramOptions.SetDefaultValue( 512 )
	params.AddParamDef( "resolution", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "sunRadiusScale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 2010 )
	params.AddParamDef( "year", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 7 )
	params.AddParamDef( "month", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 10 )
	params.AddParamDef( "day", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 35.6894 )
	params.AddParamDef( "latitude", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 139.6917 )
	params.AddParamDef( "longitude", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	params.AddParamDef( "sunDirection", c.siShaderDataTypeVector3, paramOptions )
	
	paramOptions.SetDefaultValue( 3 )
	paramOptions.SetHardLimit( 1, 10 )
	params.AddParamDef( "turbidity", c.siShaderDataTypeScalar, paramOptions )
		
	paramOptions.SetDefaultValue( 15 )
	paramOptions.SetHardLimit( 0, 24 )
	params.AddParamDef( "hour", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetHardLimit( 0, 60 )
	params.AddParamDef( "minute", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetHardLimit( 0, 60 )
	params.AddParamDef( "second", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 9 )
	paramOptions.SetHardLimit( 0, 24 )
	params.AddParamDef( "timezone", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mSun" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )
	

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "turbidity", "Turbidity" )
	ppgLayout.AddItem( "year", "Year" )
	ppgLayout.AddItem( "month", "Month" )
	ppgLayout.AddItem( "day", "Day" )
	ppgLayout.AddItem( "hour", "Hour" )
	ppgLayout.AddItem( "minute", "Minute" )
	ppgLayout.AddItem( "second", "Second" )
	ppgLayout.AddItem( "latitude", "Latitude" )
	ppgLayout.AddItem( "longitude", "Longitude" )
	ppgLayout.AddItem( "timezone", "Timezone" )
	ppgLayout.AddItem( "sunDirection", "Sun Direction" )
	ppgLayout.AddItem( "resolution", "Resolution" )
	ppgLayout.AddItem( "scale", "Scale" )
	ppgLayout.AddItem( "sunRadiusScale", "Sun Radius Scale" )
	
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mSun"
	
	return True

def MaSsShaders_mSky_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilyLight)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 512 )
	params.AddParamDef( "resolution", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 2010 )
	params.AddParamDef( "year", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 7 )
	params.AddParamDef( "month", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 10 )
	params.AddParamDef( "day", c.siShaderDataTypeInteger, paramOptions )
	paramOptions.SetDefaultValue( 35.6894 )
	params.AddParamDef( "latitude", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 139.6917 )
	params.AddParamDef( "longitude", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	params.AddParamDef( "sunDirection", c.siShaderDataTypeVector3, paramOptions )
	paramOptions.SetDefaultValue( 0.15 )
	params.AddParamDef( "albedo", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetDefaultValue( 3 )
	paramOptions.SetHardLimit( 1, 10 )
	params.AddParamDef( "turbidity", c.siShaderDataTypeScalar, paramOptions )
	#paramOptions.SetDefaultValue( 0.15 )
	#paramOptions.SetHardLimit( 0, 1 )
	
	
	paramOptions.SetDefaultValue( 15 )
	paramOptions.SetHardLimit( 0, 24 )
	params.AddParamDef( "hour", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetHardLimit( 0, 60 )
	params.AddParamDef( "minute", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetHardLimit( 0, 60 )
	params.AddParamDef( "second", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 9 )
	paramOptions.SetHardLimit( 0, 24 )
	params.AddParamDef( "timezone", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetDefaultValue( 1 )
	paramOptions.SetHardLimit( 1, 2 )
	params.AddParamDef( "stretch", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mSky" )
	params.AddParamDef( "mLightType", c.siShaderDataTypeString, paramOptions )
	

	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "turbidity", "Turbidity" )
	ppgLayout.AddItem( "albedo", "Albedo" )
	ppgLayout.AddItem( "year", "Year" )
	ppgLayout.AddItem( "month", "Month" )
	ppgLayout.AddItem( "day", "Day" )
	ppgLayout.AddItem( "hour", "Hour" )
	ppgLayout.AddItem( "minute", "Minute" )
	ppgLayout.AddItem( "second", "Second" )
	ppgLayout.AddItem( "latitude", "Latitude" )
	ppgLayout.AddItem( "longitude", "Longitude" )
	ppgLayout.AddItem( "timezone", "Timezone" )
	ppgLayout.AddItem( "sunDirection", "Sun Direction" )
	ppgLayout.AddItem( "stretch", "Stretch" )
	ppgLayout.AddItem( "resolution", "Resolution" )
	ppgLayout.AddItem( "scale", "Scale" )
	

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mSky"
	
	return True

def MaSsShaders_mDiffuse_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mDiffuse" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "diffuse" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")

	ppgLayout.AddItem( "reflectance", "Reflectance" )

	ppgLayout.EndGroup()


	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mDiffuse"
	return True

def MaSsShaders_mRoughDiffuse_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.2 )
	params.AddParamDef( "alpha", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	params.AddParamDef( "useFastApprox", c.siShaderDataTypeBoolean, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRoughDiffuse" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "roughdiffuse" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")

	ppgLayout.AddItem( "reflectance", "Reflectance" )
	ppgLayout.AddItem( "alpha", "Alpha" )
	ppgLayout.AddItem( "useFastApprox", "Use Fast Approx" )

	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRoughDiffuse"
	return True

def MaSsShaders_mDielectric_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	#paramOptions.SetDefaultValue("Bk7")
	#params.AddParamDef("intIORstring", c.siShaderDataTypeString, paramOptions)
	paramOptions.SetDefaultValue( 1.5046 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	#paramOptions.SetDefaultValue("Air")
	#params.AddParamDef("extIORstring", c.siShaderDataTypeString, paramOptions)
	paramOptions.SetDefaultValue( 1.000277 )
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularTransmittance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mDielectric" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "dielectric" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	#ppgLayout.AddEnumControl( "intIORstring", iorPresets, "int IOR Preset" ) 
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	#ppgLayout.AddEnumControl( "extIORstring", iorPresets, "ext IOR Preset" ) 
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "specularTransmittance", "Specular Transmittance" )

	ppgLayout.EndGroup()
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mDielectric"
	return True

def MaSsShaders_mThinDielectric_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1.5046 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularTransmittance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mThinDielectric" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "thindielectric" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "specularTransmittance", "Specular Transmittance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mThinDielectric"
	return True

def MaSsShaders_mRoughDielectric_1_0_Define( in_ctxt ) :

	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "beckmann")
	params.AddParamDef( "distribution", c.siShaderDataTypeString, paramOptions )


	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alphaU", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alphaV", c.siShaderDataTypeColor3, paramOptions )

	paramOptions.SetDefaultValue( 1.5046 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularTransmittance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alpha", c.siShaderDataTypeColor3, paramOptions )

	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRoughDielectric" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "roughdielectric" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )

	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "distribution", distributions, "Distribution" )
	ppgLayout.AddItem( "alpha", "Alpha" )
	ppgLayout.AddItem( "alphaU", "Alpha U" )
	ppgLayout.AddItem( "alphaV", "Alpha V" )

	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "specularTransmittance", "Specular Transmittance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRoughDielectric"
	return True

def MaSsShaders_mConductor_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "Cu")
	params.AddParamDef( "material", c.siShaderDataTypeString, paramOptions )
	#paramOptions.SetDefaultValue( 0)
	#params.AddParamDef( "eta", c.siShaderDataTypeColor3, paramOptions )
	#paramOptions.SetDefaultValue( 0)
	#params.AddParamDef( "k", c.siShaderDataTypeColor3, paramOptions )
	#paramOptions.SetDefaultValue( "air")
	#params.AddParamDef( "extEtaStr", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 1)
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extEta", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mConductor" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "conductor" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "material", conductorPresets, "Material" )
	#ppgLayout.AddItem( "eta", "Eta" )
	#ppgLayout.AddItem( "k", "K" )
	#ppgLayout.AddItem( "extEtaStr", "Ext Eta String" )
	ppgLayout.AddItem( "extEta", "Ext Eta" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.EndGroup()
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mConductor"
	return True

def MaSsShaders_mRoughConductor_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "beckmann")
	params.AddParamDef( "distribution", c.siShaderDataTypeString, paramOptions )


	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alphaU", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alphaV", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alpha", c.siShaderDataTypeColor3, paramOptions )

	paramOptions.SetDefaultValue( "Cu")
	params.AddParamDef( "material", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 1)
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extEta", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRoughConductor" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "roughconductor" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "distribution", distributions, "Distribution" )
	ppgLayout.AddItem( "alpha", "Alpha" )
	ppgLayout.AddItem( "alphaU", "Alpha U" )
	ppgLayout.AddItem( "alphaV", "Alpha V" )

	ppgLayout.AddEnumControl( "material", conductorPresets, "Material" )
	ppgLayout.AddItem( "extEta", "Ext Eta" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRoughConductor"
	return True

def MaSsShaders_mPlastic_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1.49 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "diffuseReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( False )
	params.AddParamDef( "nonlinear", c.siShaderDataTypeBoolean, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mPlastic" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "plastic" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "diffuseReflectance", "Diffuse Reflectance" )
	ppgLayout.AddItem( "nonlinear", "Nonlinear" )
	ppgLayout.EndGroup()
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mPlastic"
	return True

def MaSsShaders_mRoughPlastic_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "beckmann")
	params.AddParamDef( "distribution", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alpha", c.siShaderDataTypeColor3, paramOptions )

	paramOptions.SetDefaultValue( 1.49 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "diffuseReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( False )
	params.AddParamDef( "nonlinear", c.siShaderDataTypeBoolean, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRoughPlastic" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "roughplastic" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "distribution", distributions, "Distribution" )
	ppgLayout.AddItem( "alpha", "Alpha" )
	
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "diffuseReflectance", "Diffuse Reflectance" )
	ppgLayout.AddItem( "nonlinear", "Nonlinear" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRoughPlastic"
	return True

def MaSsShaders_mCoating_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1.5046 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "thickness", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "sigmaA", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	params.AddParamDef( "bsdf", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mCoating" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "coating" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "thickness", "Thickness" )
	ppgLayout.AddItem( "sigmaA", "Sigma A" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	#ppgLayout.AddItem( "bsdf", "BSDF" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mCoating"
	return True

def MaSsShaders_mRoughCoating_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "beckmann")
	params.AddParamDef( "distribution", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alpha", c.siShaderDataTypeColor3, paramOptions )

	paramOptions.SetDefaultValue( 1.5046 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "thickness", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "sigmaA", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	params.AddParamDef( "bsdf", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRoughCoating" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "roughcoating" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "distribution", distributions, "Distribution" )
	ppgLayout.AddItem( "alpha", "Alpha" )

	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "thickness", "Thickness" )
	ppgLayout.AddItem( "sigmaA", "Sigma A" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	#ppgLayout.AddItem( "bsdf", "BSDF" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRoughCoating"
	return True

def MaSsShaders_mBumpMap_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	params.AddParamDef( "texture", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.2 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	params.AddParamDef( "bsdf", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mBumpMap" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "bumpmap" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "texture", "Texture" )
	ppgLayout.AddItem( "scale", "Scale" )
	#ppgLayout.AddItem( "bsdf", "BSDF" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mBumpMap"
	return True

def MaSsShaders_mPhong_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 30 )
	paramOptions.SetSoftLimit(0, 100)
	params.AddParamDef( "exponent", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0.2 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.5 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "diffuseReflectance", c.siShaderDataTypeColor3, paramOptions )

	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mPhong" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "phong" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "exponent", "exponent" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "diffuseReflectance", "Diffuse Reflectance" )
	ppgLayout.EndGroup()
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mPhong"
	return True

def MaSsShaders_mWard_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "balanced")
	params.AddParamDef( "variant", c.siShaderDataTypeString, paramOptions )

	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alphaU", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alphaV", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.2 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.5)
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "diffuseReflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mWard" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "ward" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl("variant", wardVariants, "Variant")
	ppgLayout.AddItem( "alphaU", "Alpha U" )
	ppgLayout.AddItem( "alphaV", "Alpha V" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "diffuseReflectance", "Diffuse Reflectance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mWard"
	return True

def MaSsShaders_mMixtureBsdf_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	paramOptions.SetSoftLimit(0, 1)
	paramOptions.SetHardLimit(0, 1)
	params.AddParamDef( "weights", c.siShaderDataTypeScalar, paramOptions )
	params.AddParamDef( "bsdf1", c.siShaderDataTypeColor4, paramOptions )
	params.AddParamDef( "bsdf2", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mMixtureBsdf" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mixturebsdf" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "weights", "Weight" )
	#ppgLayout.AddItem( "bsdf1", "BSDF One" )
	#ppgLayout.AddItem( "bsdf2", "BSDF Two" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mMixtureBsdf"
	return True

def MaSsShaders_mBlendBsdf_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "weight", c.siShaderDataTypeColor3, paramOptions )
	params.AddParamDef( "bsdf1", c.siShaderDataTypeColor4, paramOptions )
	params.AddParamDef( "bsdf2", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mBlendBsdf" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "blendbsdf" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "weight", "Weight" )
	#ppgLayout.AddItem( "bsdf1", "BSDF One" )
	#ppgLayout.AddItem( "bsdf2", "BSDF Two" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mBlendBsdf"
	return True

def MaSsShaders_mMask_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	paramOptions.SetSoftLimit(0, 1)
	paramOptions.SetHardLimit(0, 1)
	params.AddParamDef( "opacity", c.siShaderDataTypeColor3, paramOptions )
	params.AddParamDef( "bsdf", c.siShaderDataTypeColor4, paramOptions )

	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mMask" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mask" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "opacity", "Opacity" )
	#ppgLayout.AddItem( "bsdf", "BSDF" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mMask"
	return True

def MaSsShaders_mTwoSided_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	params.AddParamDef( "bsdf", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mTwoSided" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "twosided" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "bsdf", "BSDF" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mTwoSided"
	return True

def MaSsShaders_mDiffTrans_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "transmittance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mDiffTrans" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "difftrans" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "transmittance", "Transmittance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mDiffTrans"
	return True

def MaSsShaders_mHk_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "Skin1" )
	params.AddParamDef( "material", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	paramOptions.SetSoftLimit(0, 10)
	params.AddParamDef( "thickness", c.siShaderDataTypeScalar, paramOptions )
	params.AddParamDef( "phase", c.siShaderDataTypeColor4, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mHk" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "hk" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "material", sPresets, "Material" )
	ppgLayout.AddItem( "thickness", "Thickness" )
	#ppgLayout.AddItem( "phase", "Phase" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mHk"
	return True

def MaSsShaders_mIrawan_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mIrawan" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "irawan" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	#ppgLayout.AddItem( "reflectance", "Reflectance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mIrawan"
	return True

def MaSsShaders_mBitmap_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "texture", c.siShaderDataTypeImage, paramOptions )
	paramOptions.SetDefaultValue( "repeat" )
	params.AddParamDef( "wrapModeU", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( "repeat" )
	params.AddParamDef( "wrapModeV", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( "ewa" )
	params.AddParamDef( "filterType", c.siShaderDataTypeString, paramOptions )

	paramOptions.SetDefaultValue( True )
	params.AddParamDef( "cache", c.siShaderDataTypeBoolean, paramOptions )

	paramOptions.SetDefaultValue( 20 )
	paramOptions.SetSoftLimit(0, 50)
	params.AddParamDef( "maxAnisotropy", c.siShaderDataTypeScalar, paramOptions )

	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "uoffset", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "voffset", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "uscale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "vscale", c.siShaderDataTypeScalar, paramOptions )

	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mBitmap" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "bitmap" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "wrapModeU", wrapModes, "Wrap Mode U" )
	ppgLayout.AddEnumControl( "wrapModeV", wrapModes, "Wrap Mode V" )
	ppgLayout.AddEnumControl( "filterType", filterTypes, "Filter Type" )
	ppgLayout.AddItem( "cache", "Cache" )
	ppgLayout.AddItem( "maxAnisotropy", "Max Anisotropy" )
	ppgLayout.AddItem( "uoffset", "U Offset" )
	ppgLayout.AddItem( "voffset", "V Offset" )
	ppgLayout.AddItem( "uscale", "U Scale" )
	ppgLayout.AddItem( "vscale", "V Scale" )
	ppgLayout.AddItem( "texture", "Texture" )
	ppgLayout.EndGroup()
	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mBitmap"
	return True

def MaSsShaders_mCheckboard_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.4 )
	params.AddParamDef( "color0", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.2 )
	params.AddParamDef( "color1", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "uoffset", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "voffset", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 5 )
	paramOptions.SetSoftLimit(1, 10)
	params.AddParamDef( "uscale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 5 )
	paramOptions.SetSoftLimit(1, 10)
	params.AddParamDef( "vscale", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mCheckboard" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "checkerboard" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "color0", "Color 0" )
	ppgLayout.AddItem( "color1", "Color 1" )
	ppgLayout.AddItem( "uoffset", "U Offset" )
	ppgLayout.AddItem( "voffset", "V Offset" )
	ppgLayout.AddItem( "uscale", "U Scale" )
	ppgLayout.AddItem( "vscale", "V Scale" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mCheckboard"
	return True

def MaSsShaders_mGridTexture_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.2 )
	params.AddParamDef( "color0", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.4 )
	params.AddParamDef( "color1", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.01 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "lineWidth", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "uoffset", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "voffset", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 5 )
	paramOptions.SetSoftLimit(1, 10)
	params.AddParamDef( "uscale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 5 )
	paramOptions.SetSoftLimit(1, 10)
	params.AddParamDef( "vscale", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mGridTexture" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "gridtexture" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "color0", "Color 0" )
	ppgLayout.AddItem( "color1", "Color 1" )
	ppgLayout.AddItem( "lineWidth", "Line Width" )
	ppgLayout.AddItem( "uoffset", "U Offset" )
	ppgLayout.AddItem( "voffset", "V Offset" )
	ppgLayout.AddItem( "uscale", "U Scale" )
	ppgLayout.AddItem( "vscale", "V Scale" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mGridTexture"
	return True

def MaSsShaders_mScale_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "input", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "value", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mScale" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "scale" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "input", "Input" )
	ppgLayout.AddItem( "value", "Value" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mScale"
	return True

def MaSsShaders_mVertexColors_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mVertexColors" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "vertexcolors" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mVertexColors"
	return True

def MaSsShaders_mWireframe_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "interiorColor", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.1 )
	params.AddParamDef( "edgeColor", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( 0.01 )
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "lineWidth", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 0.5 )
	paramOptions.SetSoftLimit(0, 1)
	paramOptions.SetHardLimit(0, 1)
	params.AddParamDef( "stepWidth", c.siShaderDataTypeScalar, paramOptions )
	
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mWireframe" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "wireframe" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "interiorColor", "Interior Color" )
	ppgLayout.AddItem( "edgeColor", "Edge Color" )
	ppgLayout.AddItem( "lineWidth", "Line Width" )
	ppgLayout.AddItem( "stepWidth", "Step Width" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mWireframe"
	return True

def MaSsShaders_mCurvature_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( "mean" )
	params.AddParamDef( "curvature", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 1)
	paramOptions.SetSoftLimit(0, 5)
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mCurvature" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "curvature" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddEnumControl( "curvature", curvatures, "Curvature" )
	ppgLayout.AddItem("scale", "Scale")
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mCurvature"
	return True

def MaSsShaders_mRoughSSSDipole_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters for rough plastic
	paramOptions.SetDefaultValue( "beckmann")
	params.AddParamDef( "distribution", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 0.1)
	paramOptions.SetSoftLimit(0, 1)
	params.AddParamDef( "alpha", c.siShaderDataTypeColor3, paramOptions )

	paramOptions.SetDefaultValue( 1.49 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( False )
	params.AddParamDef( "nonlinear", c.siShaderDataTypeBoolean, paramOptions )

	#preset dipole parameters
	paramOptions.SetDefaultValue( "Skin1" )
	params.AddParamDef( "material", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 16 )
	paramOptions.SetSoftLimit(1, 128)
	params.AddParamDef( "irrSamples", c.siShaderDataTypeInteger , paramOptions )

	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRoughSSSDipole" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "roughsssdipole" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Rough Plastic Parameters")
	ppgLayout.AddEnumControl( "distribution", distributions, "Distribution" )
	ppgLayout.AddItem( "alpha", "Alpha" )
	
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "nonlinear", "Nonlinear" )
	ppgLayout.EndGroup()
	ppgLayout.AddGroup("Dipole Parameters")
	ppgLayout.AddEnumControl( "material", sPresets, "Material" )
	ppgLayout.AddItem( "scale", "Scale" )
	ppgLayout.AddItem( "irrSamples", "Irradiance Samples" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRoughSSSDipole"
	return True

def MaSsShaders_mSSSDipole_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters for plastic
	paramOptions.SetDefaultValue( 1.49 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "intIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.000277 )
	paramOptions.SetSoftLimit(1, 3)
	params.AddParamDef( "extIOR", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 1.0 )
	params.AddParamDef( "specularReflectance", c.siShaderDataTypeColor3, paramOptions )
	paramOptions.SetDefaultValue( False )
	params.AddParamDef( "nonlinear", c.siShaderDataTypeBoolean, paramOptions )

	#preset dipole parameters
	paramOptions.SetDefaultValue( "Skin1" )
	params.AddParamDef( "material", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "scale", c.siShaderDataTypeScalar, paramOptions )
	paramOptions.SetDefaultValue( 16 )
	paramOptions.SetSoftLimit(1, 128)
	params.AddParamDef( "irrSamples", c.siShaderDataTypeInteger , paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mSSSDipole" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "sssdipole" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Plastic Parameters")
	ppgLayout.AddItem( "intIOR", "Int IOR" )
	ppgLayout.AddItem( "extIOR", "Ext IOR" )
	ppgLayout.AddItem( "specularReflectance", "Specular Reflectance" )
	ppgLayout.AddItem( "nonlinear", "Nonlinear" )
	ppgLayout.EndGroup()
	ppgLayout.AddGroup("Dipole Parameters")
	ppgLayout.AddEnumControl( "material", sPresets, "Material" )
	ppgLayout.AddItem( "scale", "Scale" )
	ppgLayout.AddItem( "irrSamples", "Irradiance Samples" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mSSSDipole"
	return True

def MaSsShaders_mHomogeneous_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mHomogeneous" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "homogeneous" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mHomogeneous"
	return True

def MaSsShaders_mHeterogeneous_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mHeterogeneous" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "heterogeneous" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mHeterogeneous"
	return True

def MaSsShaders_mIsotropic_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mIsotropic" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "isotropic" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mIsotropic"
	return True

def MaSsShaders_mHg_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mHg" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "hg" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mHg"
	return True

def MaSsShaders_mRayleigh_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mRayleigh" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "rayleigh" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mRayleigh"
	return True

def MaSsShaders_mKkay_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mKkay" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "kkay" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mKkay"
	return True

def MaSsShaders_mMicroflake_1_0_Define(in_ctxt):
	shaderDef = in_ctxt.GetAttribute("Definition")
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mMicroflake" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "microflake" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mMicroflake"
	return True

def MaSsShaders_mMixturePhase_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mMixturePhase" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mixturephase" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mMixturePhase"
	return True

def MaSsShaders_mConstVolume_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mConstVolume" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "constvolume" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mConstVolume"
	return True

def MaSsShaders_mGridVolume_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mGridVolume" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "gridvolume" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mGridVolume"
	return True

def MaSsShaders_mVolCache_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 0.5 )
	params.AddParamDef( "reflectance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mVolCache" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "volcache" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddItem( "reflectance", "Reflectance" )

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mVolCache"
	return True

def MaSsShaders_mEmitter_1_0_Define( in_ctxt ) :
	shaderDef = in_ctxt.GetAttribute("Definition")
	
	shaderDef.AddShaderFamily(c.siShaderFamilySurfaceMat)
	
	# Input Parameter: input
	paramOptions = XSIFactory.CreateShaderParamDefOptions()
	paramOptions.SetAnimatable(True)
	paramOptions.SetTexturable(True)
	paramOptions.SetReadOnly(False)
	paramOptions.SetInspectable(True)
	
	params = shaderDef.InputParamDefs
	paramOptions.SetAttribute(c.siReferenceFilterAttribute, c.siShaderReferenceFilter)
	
	#parameters
	paramOptions.SetDefaultValue( 1 )
	params.AddParamDef( "radiance", c.siShaderDataTypeColor3, paramOptions )
	
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "mEmitter" )
	params.AddParamDef( "mShaderType", c.siShaderDataTypeString, paramOptions )
	paramOptions.SetAnimatable(False)
	paramOptions.SetTexturable(False)
	paramOptions.SetReadOnly(True)
	paramOptions.SetInspectable(False)
	paramOptions.SetDefaultValue( "emitter" )#use this for export type of a mat
	params.AddParamDef( "mShaderName", c.siShaderDataTypeString, paramOptions )
	
	# Output Parameter: out
	AddOutputParam( shaderDef ) 
	
	#next init ppg
	ppgLayout = shaderDef.PPGLayout
	ppgLayout.AddGroup("Parameters")
	ppgLayout.AddItem( "radiance", "Radiance" )
	ppgLayout.EndGroup()

	# Renderer definition
	rendererDef = shaderDef.AddRendererDef( "Mitsuba" )
	rendererDef.SymbolName = "mEmitter"
	return True

